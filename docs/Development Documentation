Creation of Chicken CSV records:

It is important to note that this full project was created in about the space of 2 weeks - I unfortunately had prior commitments during the first two weeks of the project, dramatically cutting into my time to work on it. As such, there are some improvements that could no doubt be made, but time was unfortunately not on our side for this. One such improvement that springs to mind would be utilising a more complex initial dataset, which could be generated by using the random function in conjunction with lists, in order to populate a dataset of about 100 entries or so. This could then be utilised in order to provide a pseudo stress test of the system, and demonstrate the capabilities of it. If further work was to be done on this project, this seems like a logical next step, in order to demonstrate the ability of the system to adapt to various stresses.

I initially began the work by setting out the program menu. The first challenge present was creating a way of accepting user inputs, which was easily solved by utilising the input function.
With the ability to accept user inputs, the next step was to create the actual initial menu. In order to do this, I first utilised the print function in order to display an initial menu, and then to display what would happen when each menu option was selected. This initial menu worked well enough, and proved that the inputs were able to be accepted.
From here, I next nested it within a while loop, in order to enable testing of the exit function. Around this same time, I imported the clear output function, as this enabled us to keep the screen from becoming clogged with the menu outputs whilst it was looping. This enabled us to test the exit function. Initially the menu was only designed to have the options to display the list of chickens, add a chicken, update a chicken, delete a chicken, and exit the program. This initial requirement was what was requested by the base brief, however I felt that further improvements could be made, given time.

The next major step was to begin to implement the functions required in order to perform the actions listed within the menu. These were initially created within cells with the intent to eventually incorporate them into the menu itself, however during this development period, I discovered the utility of defining functions, which has resulted in the end code being far easier to read and understand.

This is also where Pandas was added, as we needed to be able to read the base CSV file that was created in order to perform various functions on this. Loading this CSV as a dataframe was a simple matter, and many of the other functions utilise basic Pandas functionality. There are a few notable sections however, which will be mentioned below.

The first and most notable is that all of the functions are nested within a while loop. This is so that we are able to perform checks upon the data as it is entered, in order to minimise the amount of 'dirty' data that is entered. That is to say, it helps to ensure that things such as age are entered as numerical numbers, and that sizes are only entered within a set of allowed values. However, these requirements can be easily modified, as will be discussed later. The while loop enables the program to run smoothly and account for user error, whilst providing the end user more options.

Within the new_chicken() function, along with the update_chicken() function, we utilise the aforementioned checks in order to minimise the 'dirty' data that is entered. We utilise the .capitalize() function here in order to normalise the data entered, and only accept set inputs for variables such as size. There is a known issue within age, where the system will break if a non-numerical value is entered, this is something that, given more time, I would have liked to have added more failsafe's for. As it is, it accepts int values - this could be modified to accept floats, however, if so desired by the end user.

The other notable part of this confirmation is the check to see if the user wishes to retry with the function they chose, or if they simply wish to return to the main menu. This utilises a simple Y/N choice, but it enables the user to have more control over their actions within the program. This is also why we nest the end menu code within a while loop, as this allows us to continuously return to the menu after using a function.

After all of this, it is also worth mentioning the save function. Once again, this utilises a basic Pandas function to write an updated dataframe to a CSV file, letting us update the CSV file. However, we also utilise this within the end_chicken() function, in order to allow us to check if a user wishes to save their changes before exiting. This allows us to cut down on redundant code within the program itself, and result in a cleaner end code, whilst still retaining user freedom.

The final part of the code that is worth mentioning is the sleep function. Sleep is a contraversal function, as it does slow the code down, which isn't ideal. However, I elected to use it here as it enables the user to see responses from the console, and a slight delay when saving or closing enables an end user to feel more comfortable that the opperation has been performed successfully, rather than having them end up concerned about it. If the sleep function becomes troublesome, however, it is easy enough to remove.